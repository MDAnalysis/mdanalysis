# -*- Mode: conf; tab-width: 4; indent-tabs-mode:nil; coding:utf-8 -*-
[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
ignore-patterns=

# Pickle collected data for later comparisons.
persistent=no

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Use multiple processes to speed up Pylint.
jobs=1

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=

# Allow optimization of some AST trees. This will activate a peephole AST
# optimizer, which will apply various small optimizations. For instance, it can
# be used to obtain the result of joining multiple strings with the addition
# operator. Joining a lot of strings can lead to a maximum recursion error in
# Pylint and this flag can prevent that. It has one side effect, the resulting
# AST will be different than the one from reality. This option is deprecated
# and it will be removed in Pylint 2.0.
optimize-ast=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
disable=all

enable=abstract-class-instantiated,
       access-member-before-definition,
       anomalous-unicode-escape-in-string,
       apply-builtin,
       assert-on-tuple,
       assigning-non-slot,
       assignment-from-no-return,
       backtick,
       bad-except-order,
       bad-exception-context,
       bad-format-character,
       bad-format-string,
       bad-format-string-key,
       bad-open-mode,
       bad-reversed-sequence,
       bad-staticmethod-argument,
       bad-str-strip-call,
       binary-op-exception,
       boolean-datetime
       buffer-builtin,
       catching-non-exception,
       cmp-builtin,
       cmp-method,
       coerce-builtin,
       coerce-method,
       confusing-with-statement,
       continue-in-finally,
       delslice-method,
       deprecated-method,
       deprecated-module,
       dict-iter-method,
       dict-view-method,
       duplicate-argument-name,
       duplicate-bases,
       duplicate-except,
       duplicate-key,
       eval-used,
       exec-used,
       execfile-builtin,
       file-builtin,
       format-combined-specification,
       format-needs-mapping,
       getslice-method,
       global-at-module-level,
       global-statement,
       global-variable-not-assigned,
       global-variable-undefined,
       hex-method,
       import-star-module-level,
       inconsistent-mro,
       inherit-non-class,
       init-is-generator,
       input-builtin,
       intern-builtin,
       invalid-all-object,
       invalid-encoded-data,
       invalid-format-index,
       invalid-slots,
       invalid-slots-object,
       invalid-star-assignment-target,
       logging-format-truncated,
       logging-not-lazy,
       logging-too-few-args,
       logging-too-many-args,
       logging-unsupported-format,
       long-suffix,
       lost-exception,
       lowercase-l-suffix,
       method-hidden,
       misplaced-bare-raise,
       misplaced-future,
       missing-format-argument-key,
       missing-format-attribute,
       missing-format-string-key,
       missing-kwoa,
       missing-super-argument,
       mixed-format-string,
       mixed-indentation,
       no-init,
       no-method-argument,
       non-iterator-returned,
       non-parent-init-called,
       nonexistent-operator,
       nonlocal-and-global,
       nonlocal-without-binding,
       nonstandard-exception,
       not-a-mapping,
       not-an-iterable,
       not-async-context-manager,
       not-context-manager,
       not-in-loop,
       notimplemented-raised,
       oct-method,
       old-ne-operator,
       old-octal-literal,
       old-raise-syntax,
       parameter-unpacking,
       raising-non-exception,
       raising-string,
       raw_input-builtin,
       redefine-in-handler,
       redundant-keyword-arg,
       redundant-unittest-assert,
       reload-builtin,
       repeated-keyword,
       return-arg-in-generator,
       return-in-init,
       return-outside-function,
       setslice-method,
       signature-differs,
       slots-on-old-class,
       standarderror-builtin,
       star-needs-assignment-target,
       super-on-old-class,
       too-few-format-args,
       too-few-public-methods,
       too-many-function-attributes,
       too-many-star-expressions,
       truncated-format-string,
       unexpected-keyword-arg,
       unichr-builtin,
       unicode-builtin,
       unnecessary-pass,
       unpacking-in-except,
       unreachable,
       unsubscriptable-object,
       unsupported-binary-operation,
       unsupported-membership-test,
       unused-format-string-argument,
       unused-format-string-key,
       useless-else-on-loop,
       using-cmp-argument,
       using-constant-test,
       yield-inside-async-function,
       yield-outside-function,
       old-division,
       relative-import,
       no-absolute-import,
       print-statement,
       xrange-builtin,
       zip-builtin-not-iterating,
       map-builtin-not-iterating,

# Things we'd like to try.
# Procedure:
# 1. Enable a bunch.
# 2. See if there's spurious ones; if so disable.
# 3. Record above.
# 4. Remove from this list.
       # abstract-method,
       # anomalous-backslash-in-string,
       # arguments-differ,
       # assignment-from-none,
       # attribute-defined-outside-init,
       # bad-builtin,
       # bad-indentation,
       # bad-super-call,
       # bare-except,
       # basestring-builtin,
       # broad-except,
       # cell-var-from-loop,
       # dangerous-default-value,
       # deprecated-lambda,
       # expression-not-assigned,
       # filter-builtin-not-iterating,
       # fixme,
       # function-redefined,
       # import-error,
       # indexing-exception,
       # invalid-name,
       # invalid-sequence-index,
       # invalid-slice-index,
       # logging-format-interpolation,
       # long-builtin,
       # metaclass-assignment,
       # missing-docstring,
       # next-method-called,
       # no-member,
       # no-self-argument,
       # no-value-for-parameter,
       # nonzero-method,
       # not-callable,
       # pointless-statement,
       # pointless-string-statement,
       # property-on-old-class,
       # protected-access,
       # redefined-builtin,
       # redefined-outer-name,
       # reduce-builtin,
       # reimported,
       # round-builtin,
       # super-init-not-called,
       # too-many-arguments,
       # too-many-format-args,
       # too-many-function-args,
       # too-many-locals,
       # undefined-all-variable,
       # undefined-loop-variable,
       # unexpected-special-method-signature,
       # unnecessary-lambda,
       # unnecessary-semicolon,
       # unpacking-non-sequence,
       # unused-argument,
       # unused-import,
       # unused-variable,
       # unused-wildcard-import,
       # used-before-assignment,
       # wildcard-import,
       # wrong-import-order,
       # invalid-unary-operand-type,
       # raising-bad-type,


[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=parseable

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]". This option is deprecated
# and it will be removed in Pylint 2.0.
files-output=no

# Tells whether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=_$|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,_cb

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=80

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check=trailing-comma,dict-separator

# Maximum number of lines in a module
max-module-lines=2000

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren=4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=


[BASIC]

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,input

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,x

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Include a hint for the correct naming format with invalid-name
include-naming-hint=no

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
property-classes=abc.abstractproperty

# Regular expression matching correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for function names
function-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for variable names
variable-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct constant names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Naming hint for constant names
const-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression matching correct attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for attribute names
attr-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for argument names
argument-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct class attribute names
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Naming hint for class attribute names
class-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Regular expression matching correct inline iteration names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Naming hint for inline iteration names
inlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$

# Regular expression matching correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Naming hint for class names
class-name-hint=[A-Z_][a-zA-Z0-9]+$

# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Naming hint for module names
module-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression matching correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for method names
method-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[ELIF]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5


[LOGGING]

# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging


[SPELLING]

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,_fields,_replace,_source,_make


[DESIGN]

# Maximum number of arguments for function / method
max-args=10

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=30

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=0

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of boolean expressions in a if statement
max-bool-expr=5


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception
